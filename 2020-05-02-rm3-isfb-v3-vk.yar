rule crime_win32_banker_rm3_isfb_1 {
meta:
	description = "Detects ISFB v3 RM3 payload"
	author = "@VK_Intel"
	reference = "https://twitter.com/VK_Intel/status/1256653985437622272"
	description = "white"
	date = "2020-05-02"
strings:
  $start_code = {56 6a 00 ff ?? ?? ?? ?? ?? 8b f0 ff ?? ?? ?? ?? ?? 85 c0 a3 ?? ?? ?? ?? 74 ?? 6a 00 ff ?? ?? ?? ?? ?? 50 ff ?? ?? ?? ?? ?? 35 02 01 00 00 50 e8 ?? ?? ?? ?? 85 c0 75 ?? 56 e8 ?? ?? ?? ?? eb ?? 6a 08 58 50 ff ?? ?? ?? ?? ??}
  /*
  DISASSEMBLY:
  push    esi
  push    0
  call    ds:GetModuleHandleA
  mov     esi, eax
  call    ds:GetProcessHeap
  test    eax, eax
  mov     dword_F34010, eax
  jz      short loc_F31055
  push    0
  call    ds:GetCurrentThread
  push    eax
  call    ds:WaitForSingleObject
  xor     eax, 102h
  ....
  push    8
  pop     eax
  push    eax
  call    ds:ExitProcess
  */
  $alloc_cpy = {53 8b ?? ?? ?? ?? ?? 56 57 8b c3 35 21 41 54 7c 50 8d ?? ?? 50 8d ?? ?? 33 ff 50 8b f1 89 ?? ?? e8 ?? ?? ?? ?? 85 c0 0f ?? ?? ?? ?? ?? 8b ?? ?? 8b ?? ?? 89 ?? ?? 81 ?? ?? ?? ?? ?? ?? ff ?? ?? 81 f3 9e 89 61 b9 53 50 57 89 ?? ?? ff ?? ?? ?? ?? ?? 8b d8 3b df 89 ?? ?? 75 ?? ff ?? ?? ?? ?? ?? 89 ?? ?? e9 ?? ?? ?? ?? 53 e8 ?? ?? ?? ?? 8b ?? ?? 8b ?? ?? 03 ce 53 e8 ?? ?? ?? ?? 8b ?? ?? ff ?? ??}
  /*
  mov     [ebp+var_1C], eax
  call    ds:VirtualAlloc
  mov     ebx, eax
  cmp     ebx, edi
  mov     [ebp+var_10], ebx
  jnz     short loc_F31937
  call    ds:GetLastError
  mov     [ebp+var_4], eax
  jmp     loc_F31A00
  push    ebx             ; void *
  call    memc_0
  */
  $decr = {8b ec 83 e4 f8 8b ?? ?? ?? ?? ?? 8b ?? ?? 81 f1 9a 99 61 b9 8d ?? ?? ?? 03 ce 8b ?? 33 c0 3b d0 53 57 74 ?? 8b ?? ?? 83 f9 0c 76 ?? 03 d6 8b ?? 3b f9 77 ?? 66 ?? ?? ?? ?? ?? 75 ?? 8d ?? ?? c1 e9 04 74 ?? 8d ?? ?? 39 ?? ?? 74 ?? 8b d9 83 ?? ?? ?? 74 ?? 8b ?? 33 ?? ?? 39 ?? ?? 75 ?? f6 ?? ?? 75 ?? ff ?? ?? ff ?? ?? 56 e8 ?? ?? ?? ?? 83 c7 10 4b 85 c0 75 ?? 85 db 74 ?? 39 ?? ?? 75 ??}
  /*
  DISASSEMBLY:
  mov     ebp, esp
  and     esp, 0FFFFFFF8h
  mov     ecx, ds:dword_F35000
  mov     edx, [esi+3Ch]
  xor     ecx, 0B961999Ah
  lea     ecx, [edx+ecx*8+78h]
  add     ecx, esi
  mov     edx, [ecx]
  xor     eax, eax
  cmp     edx, eax
  push    ebx
  push    edi
  */
condition:
( uint16(0) == 0x5a4d and
( 2 of them )
) or ( all of them )
}
